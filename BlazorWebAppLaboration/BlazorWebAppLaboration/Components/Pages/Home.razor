@page "/"
@rendermode InteractiveServer
@inject IProductService _productService
@inject ICurrencyService _currencyService
@inject IShoppingCartService _shoppingCartService
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@attribute [Authorize]

<div class="container">
	<CurrencyConverter OnCurrencyChangeCallback="OnCurrencyChangeHandler" />
	<ShoppingCart />
	<ProductsContainer Products="Products" />
	<Chat />
</div>

@code {
	List<Product> Products { get; set; } = new();

	[CascadingParameter]
	Task<AuthenticationState>? authenticationState { get; set; } 

	protected override async Task OnInitializedAsync()
	{
		_currencyService.SelectedCurrency = _currencyService.InitialCurrency;
		Products = await _productService.GetProductsAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		var authState = await authenticationState;
		var user = authState.User.Identity.Name;

		if (await _localStorage.ContainKeyAsync(user))
		{
			_shoppingCartService._shoppingCartList = await _localStorage.GetItemAsync<List<Product>>(user);
			return;
		}
		_shoppingCartService._shoppingCartList = new List<Product>();
		await _localStorage.SetItemAsync<List<Product>>(user, _shoppingCartService._shoppingCartList);
	}

	async Task OnCurrencyChangeHandler(string selectedCurrency)
	{
		if (selectedCurrency == _currencyService.InitialCurrency)
		{
			Products = await _productService.GetProductsAsync();
			_currencyService.SelectedCurrency = _currencyService.InitialCurrency;

			return;
		}
		Products = await _productService.GetProductsAsync();
		Products = await _currencyService.ConvertProductsCurrencyAsync(selectedCurrency, Products);
	}
}