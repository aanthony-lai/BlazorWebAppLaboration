@page "/product/{ProductId:int}"
@rendermode InteractiveServer
@inject IProductService _productService
@inject IShoppingCartService _shoppingCartService
@inject ICurrencyService _currencyService
@inject Blazored.LocalStorage.ILocalStorageService _localStorage

@if(Product.Name == string.Empty)
{
	<ShoppingCart />
	<div class="container">
		<h1>Sorry the product you are looking for doesn't exist.</h1>
	</div>
}
else
{
	<div class="top-container">
		<CurrencyConverter SelectCurrencyCallback="OnCurrencyChangeHandler" />
		<ShoppingCart />
	</div>
	<div class="container">
		<div class="img-card">
			<img src="@Product.ImageURL" />
		</div>
		<h1>@Product.Name</h1>
		<p id="description">@Product.Description</p>
		<p id="price">Price: <strong>@Product.Price @_currencyService.SelectedCurrency</strong></p>
		<button @onclick="AddToShoppingCartHandler" class="btn @(Product.Stock == 0 ? "btn-danger" : "btn-dark")">
			@(Product.Stock == 0 ? "Out of stock" : "Add to cart")
		</button>
	</div>
}


@code {
	[Parameter]
	public int ProductId { get; set; }

	Product Product { get; set; } = new Product();

	[CascadingParameter]
	Task<AuthenticationState>? authenticationState { get; set; }

	protected override async Task OnInitializedAsync()
	{
		_currencyService.SelectedCurrency = _currencyService.InitialCurrency;

		Product = await _productService.GetProductByIdAsync(ProductId)
			?? new Product();
	}

	async Task AddToShoppingCartHandler()
	{
		var authState = await authenticationState;
		var user = authState.User.Identity.Name;

		if (!await _productService.SubtractFromStockAsync(Product))
		{
			return;
		}

		_shoppingCartService.AddToShoppingCart(Product);
		await _localStorage.SetItemAsync<List<Product>>(user, _shoppingCartService._shoppingCartList);
		Product = await _productService.GetProductByIdAsync(Product.Id);
	}

	async Task OnCurrencyChangeHandler(string selectedCurrency)
	{
		if (selectedCurrency == _currencyService.InitialCurrency)
		{
			Product = await _productService.GetProductByIdAsync(ProductId);

			_currencyService.SelectedCurrency = _currencyService.InitialCurrency;
			return;
		}
		Product = await _currencyService.ConvertSingleProductCurrencyAsync(selectedCurrency, Product);
	}
}
